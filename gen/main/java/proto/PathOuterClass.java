// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: path.proto

package proto;

public final class PathOuterClass {
  private PathOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PathOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.Path)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated double posLeft = 1;</code>
     */
    java.util.List<java.lang.Double> getPosLeftList();
    /**
     * <code>repeated double posLeft = 1;</code>
     */
    int getPosLeftCount();
    /**
     * <code>repeated double posLeft = 1;</code>
     */
    double getPosLeft(int index);

    /**
     * <code>repeated double velLeft = 2;</code>
     */
    java.util.List<java.lang.Double> getVelLeftList();
    /**
     * <code>repeated double velLeft = 2;</code>
     */
    int getVelLeftCount();
    /**
     * <code>repeated double velLeft = 2;</code>
     */
    double getVelLeft(int index);

    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    java.util.List<java.lang.Double> getAccelLeftList();
    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    int getAccelLeftCount();
    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    double getAccelLeft(int index);

    /**
     * <code>repeated double posRight = 4;</code>
     */
    java.util.List<java.lang.Double> getPosRightList();
    /**
     * <code>repeated double posRight = 4;</code>
     */
    int getPosRightCount();
    /**
     * <code>repeated double posRight = 4;</code>
     */
    double getPosRight(int index);

    /**
     * <code>repeated double velRight = 5;</code>
     */
    java.util.List<java.lang.Double> getVelRightList();
    /**
     * <code>repeated double velRight = 5;</code>
     */
    int getVelRightCount();
    /**
     * <code>repeated double velRight = 5;</code>
     */
    double getVelRight(int index);

    /**
     * <code>repeated double accelRight = 6;</code>
     */
    java.util.List<java.lang.Double> getAccelRightList();
    /**
     * <code>repeated double accelRight = 6;</code>
     */
    int getAccelRightCount();
    /**
     * <code>repeated double accelRight = 6;</code>
     */
    double getAccelRight(int index);

    /**
     * <code>required double deltaTime = 7;</code>
     */
    boolean hasDeltaTime();
    /**
     * <code>required double deltaTime = 7;</code>
     */
    double getDeltaTime();
  }
  /**
   * Protobuf type {@code proto.Path}
   */
  public static final class Path extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.Path)
      PathOrBuilder {
    // Use Path.newBuilder() to construct.
    private Path(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Path(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Path defaultInstance;
    public static Path getDefaultInstance() {
      return defaultInstance;
    }

    public Path getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Path(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                posLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              posLeft_.add(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                posLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                posLeft_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                velLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              velLeft_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                velLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                velLeft_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                accelLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000004;
              }
              accelLeft_.add(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                accelLeft_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                accelLeft_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                posRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              posRight_.add(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                posRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                posRight_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 41: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                velRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000010;
              }
              velRight_.add(input.readDouble());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                velRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                velRight_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                accelRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              accelRight_.add(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                accelRight_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                accelRight_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              bitField0_ |= 0x00000001;
              deltaTime_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          posLeft_ = java.util.Collections.unmodifiableList(posLeft_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          velLeft_ = java.util.Collections.unmodifiableList(velLeft_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          accelLeft_ = java.util.Collections.unmodifiableList(accelLeft_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          posRight_ = java.util.Collections.unmodifiableList(posRight_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          velRight_ = java.util.Collections.unmodifiableList(velRight_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          accelRight_ = java.util.Collections.unmodifiableList(accelRight_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.PathOuterClass.internal_static_proto_Path_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.PathOuterClass.internal_static_proto_Path_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proto.PathOuterClass.Path.class, proto.PathOuterClass.Path.Builder.class);
    }

    public static com.google.protobuf.Parser<Path> PARSER =
        new com.google.protobuf.AbstractParser<Path>() {
      public Path parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Path(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Path> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int POSLEFT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Double> posLeft_;
    /**
     * <code>repeated double posLeft = 1;</code>
     */
    public java.util.List<java.lang.Double>
        getPosLeftList() {
      return posLeft_;
    }
    /**
     * <code>repeated double posLeft = 1;</code>
     */
    public int getPosLeftCount() {
      return posLeft_.size();
    }
    /**
     * <code>repeated double posLeft = 1;</code>
     */
    public double getPosLeft(int index) {
      return posLeft_.get(index);
    }

    public static final int VELLEFT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> velLeft_;
    /**
     * <code>repeated double velLeft = 2;</code>
     */
    public java.util.List<java.lang.Double>
        getVelLeftList() {
      return velLeft_;
    }
    /**
     * <code>repeated double velLeft = 2;</code>
     */
    public int getVelLeftCount() {
      return velLeft_.size();
    }
    /**
     * <code>repeated double velLeft = 2;</code>
     */
    public double getVelLeft(int index) {
      return velLeft_.get(index);
    }

    public static final int ACCELLEFT_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Double> accelLeft_;
    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    public java.util.List<java.lang.Double>
        getAccelLeftList() {
      return accelLeft_;
    }
    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    public int getAccelLeftCount() {
      return accelLeft_.size();
    }
    /**
     * <code>repeated double accelLeft = 3;</code>
     */
    public double getAccelLeft(int index) {
      return accelLeft_.get(index);
    }

    public static final int POSRIGHT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Double> posRight_;
    /**
     * <code>repeated double posRight = 4;</code>
     */
    public java.util.List<java.lang.Double>
        getPosRightList() {
      return posRight_;
    }
    /**
     * <code>repeated double posRight = 4;</code>
     */
    public int getPosRightCount() {
      return posRight_.size();
    }
    /**
     * <code>repeated double posRight = 4;</code>
     */
    public double getPosRight(int index) {
      return posRight_.get(index);
    }

    public static final int VELRIGHT_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Double> velRight_;
    /**
     * <code>repeated double velRight = 5;</code>
     */
    public java.util.List<java.lang.Double>
        getVelRightList() {
      return velRight_;
    }
    /**
     * <code>repeated double velRight = 5;</code>
     */
    public int getVelRightCount() {
      return velRight_.size();
    }
    /**
     * <code>repeated double velRight = 5;</code>
     */
    public double getVelRight(int index) {
      return velRight_.get(index);
    }

    public static final int ACCELRIGHT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Double> accelRight_;
    /**
     * <code>repeated double accelRight = 6;</code>
     */
    public java.util.List<java.lang.Double>
        getAccelRightList() {
      return accelRight_;
    }
    /**
     * <code>repeated double accelRight = 6;</code>
     */
    public int getAccelRightCount() {
      return accelRight_.size();
    }
    /**
     * <code>repeated double accelRight = 6;</code>
     */
    public double getAccelRight(int index) {
      return accelRight_.get(index);
    }

    public static final int DELTATIME_FIELD_NUMBER = 7;
    private double deltaTime_;
    /**
     * <code>required double deltaTime = 7;</code>
     */
    public boolean hasDeltaTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double deltaTime = 7;</code>
     */
    public double getDeltaTime() {
      return deltaTime_;
    }

    private void initFields() {
      posLeft_ = java.util.Collections.emptyList();
      velLeft_ = java.util.Collections.emptyList();
      accelLeft_ = java.util.Collections.emptyList();
      posRight_ = java.util.Collections.emptyList();
      velRight_ = java.util.Collections.emptyList();
      accelRight_ = java.util.Collections.emptyList();
      deltaTime_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeltaTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < posLeft_.size(); i++) {
        output.writeDouble(1, posLeft_.get(i));
      }
      for (int i = 0; i < velLeft_.size(); i++) {
        output.writeDouble(2, velLeft_.get(i));
      }
      for (int i = 0; i < accelLeft_.size(); i++) {
        output.writeDouble(3, accelLeft_.get(i));
      }
      for (int i = 0; i < posRight_.size(); i++) {
        output.writeDouble(4, posRight_.get(i));
      }
      for (int i = 0; i < velRight_.size(); i++) {
        output.writeDouble(5, velRight_.get(i));
      }
      for (int i = 0; i < accelRight_.size(); i++) {
        output.writeDouble(6, accelRight_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(7, deltaTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getPosLeftList().size();
        size += dataSize;
        size += 1 * getPosLeftList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getVelLeftList().size();
        size += dataSize;
        size += 1 * getVelLeftList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAccelLeftList().size();
        size += dataSize;
        size += 1 * getAccelLeftList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getPosRightList().size();
        size += dataSize;
        size += 1 * getPosRightList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getVelRightList().size();
        size += dataSize;
        size += 1 * getVelRightList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAccelRightList().size();
        size += dataSize;
        size += 1 * getAccelRightList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, deltaTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static proto.PathOuterClass.Path parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.PathOuterClass.Path parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.PathOuterClass.Path parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.PathOuterClass.Path parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.PathOuterClass.Path parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proto.PathOuterClass.Path parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static proto.PathOuterClass.Path parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static proto.PathOuterClass.Path parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static proto.PathOuterClass.Path parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proto.PathOuterClass.Path parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(proto.PathOuterClass.Path prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.Path}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.Path)
        proto.PathOuterClass.PathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.PathOuterClass.internal_static_proto_Path_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.PathOuterClass.internal_static_proto_Path_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proto.PathOuterClass.Path.class, proto.PathOuterClass.Path.Builder.class);
      }

      // Construct using proto.PathOuterClass.Path.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        posLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        velLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        accelLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        posRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        velRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        accelRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        deltaTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.PathOuterClass.internal_static_proto_Path_descriptor;
      }

      public proto.PathOuterClass.Path getDefaultInstanceForType() {
        return proto.PathOuterClass.Path.getDefaultInstance();
      }

      public proto.PathOuterClass.Path build() {
        proto.PathOuterClass.Path result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public proto.PathOuterClass.Path buildPartial() {
        proto.PathOuterClass.Path result = new proto.PathOuterClass.Path(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          posLeft_ = java.util.Collections.unmodifiableList(posLeft_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.posLeft_ = posLeft_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          velLeft_ = java.util.Collections.unmodifiableList(velLeft_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.velLeft_ = velLeft_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          accelLeft_ = java.util.Collections.unmodifiableList(accelLeft_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.accelLeft_ = accelLeft_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          posRight_ = java.util.Collections.unmodifiableList(posRight_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.posRight_ = posRight_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          velRight_ = java.util.Collections.unmodifiableList(velRight_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.velRight_ = velRight_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          accelRight_ = java.util.Collections.unmodifiableList(accelRight_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.accelRight_ = accelRight_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deltaTime_ = deltaTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proto.PathOuterClass.Path) {
          return mergeFrom((proto.PathOuterClass.Path)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proto.PathOuterClass.Path other) {
        if (other == proto.PathOuterClass.Path.getDefaultInstance()) return this;
        if (!other.posLeft_.isEmpty()) {
          if (posLeft_.isEmpty()) {
            posLeft_ = other.posLeft_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePosLeftIsMutable();
            posLeft_.addAll(other.posLeft_);
          }
          onChanged();
        }
        if (!other.velLeft_.isEmpty()) {
          if (velLeft_.isEmpty()) {
            velLeft_ = other.velLeft_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureVelLeftIsMutable();
            velLeft_.addAll(other.velLeft_);
          }
          onChanged();
        }
        if (!other.accelLeft_.isEmpty()) {
          if (accelLeft_.isEmpty()) {
            accelLeft_ = other.accelLeft_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAccelLeftIsMutable();
            accelLeft_.addAll(other.accelLeft_);
          }
          onChanged();
        }
        if (!other.posRight_.isEmpty()) {
          if (posRight_.isEmpty()) {
            posRight_ = other.posRight_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePosRightIsMutable();
            posRight_.addAll(other.posRight_);
          }
          onChanged();
        }
        if (!other.velRight_.isEmpty()) {
          if (velRight_.isEmpty()) {
            velRight_ = other.velRight_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureVelRightIsMutable();
            velRight_.addAll(other.velRight_);
          }
          onChanged();
        }
        if (!other.accelRight_.isEmpty()) {
          if (accelRight_.isEmpty()) {
            accelRight_ = other.accelRight_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAccelRightIsMutable();
            accelRight_.addAll(other.accelRight_);
          }
          onChanged();
        }
        if (other.hasDeltaTime()) {
          setDeltaTime(other.getDeltaTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeltaTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.PathOuterClass.Path parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.PathOuterClass.Path) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Double> posLeft_ = java.util.Collections.emptyList();
      private void ensurePosLeftIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          posLeft_ = new java.util.ArrayList<java.lang.Double>(posLeft_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public java.util.List<java.lang.Double>
          getPosLeftList() {
        return java.util.Collections.unmodifiableList(posLeft_);
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public int getPosLeftCount() {
        return posLeft_.size();
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public double getPosLeft(int index) {
        return posLeft_.get(index);
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public Builder setPosLeft(
          int index, double value) {
        ensurePosLeftIsMutable();
        posLeft_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public Builder addPosLeft(double value) {
        ensurePosLeftIsMutable();
        posLeft_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public Builder addAllPosLeft(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensurePosLeftIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, posLeft_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posLeft = 1;</code>
       */
      public Builder clearPosLeft() {
        posLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> velLeft_ = java.util.Collections.emptyList();
      private void ensureVelLeftIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          velLeft_ = new java.util.ArrayList<java.lang.Double>(velLeft_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public java.util.List<java.lang.Double>
          getVelLeftList() {
        return java.util.Collections.unmodifiableList(velLeft_);
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public int getVelLeftCount() {
        return velLeft_.size();
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public double getVelLeft(int index) {
        return velLeft_.get(index);
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public Builder setVelLeft(
          int index, double value) {
        ensureVelLeftIsMutable();
        velLeft_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public Builder addVelLeft(double value) {
        ensureVelLeftIsMutable();
        velLeft_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public Builder addAllVelLeft(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureVelLeftIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, velLeft_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velLeft = 2;</code>
       */
      public Builder clearVelLeft() {
        velLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> accelLeft_ = java.util.Collections.emptyList();
      private void ensureAccelLeftIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          accelLeft_ = new java.util.ArrayList<java.lang.Double>(accelLeft_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public java.util.List<java.lang.Double>
          getAccelLeftList() {
        return java.util.Collections.unmodifiableList(accelLeft_);
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public int getAccelLeftCount() {
        return accelLeft_.size();
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public double getAccelLeft(int index) {
        return accelLeft_.get(index);
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public Builder setAccelLeft(
          int index, double value) {
        ensureAccelLeftIsMutable();
        accelLeft_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public Builder addAccelLeft(double value) {
        ensureAccelLeftIsMutable();
        accelLeft_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public Builder addAllAccelLeft(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureAccelLeftIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, accelLeft_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelLeft = 3;</code>
       */
      public Builder clearAccelLeft() {
        accelLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> posRight_ = java.util.Collections.emptyList();
      private void ensurePosRightIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          posRight_ = new java.util.ArrayList<java.lang.Double>(posRight_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public java.util.List<java.lang.Double>
          getPosRightList() {
        return java.util.Collections.unmodifiableList(posRight_);
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public int getPosRightCount() {
        return posRight_.size();
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public double getPosRight(int index) {
        return posRight_.get(index);
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public Builder setPosRight(
          int index, double value) {
        ensurePosRightIsMutable();
        posRight_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public Builder addPosRight(double value) {
        ensurePosRightIsMutable();
        posRight_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public Builder addAllPosRight(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensurePosRightIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, posRight_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double posRight = 4;</code>
       */
      public Builder clearPosRight() {
        posRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> velRight_ = java.util.Collections.emptyList();
      private void ensureVelRightIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          velRight_ = new java.util.ArrayList<java.lang.Double>(velRight_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public java.util.List<java.lang.Double>
          getVelRightList() {
        return java.util.Collections.unmodifiableList(velRight_);
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public int getVelRightCount() {
        return velRight_.size();
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public double getVelRight(int index) {
        return velRight_.get(index);
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public Builder setVelRight(
          int index, double value) {
        ensureVelRightIsMutable();
        velRight_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public Builder addVelRight(double value) {
        ensureVelRightIsMutable();
        velRight_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public Builder addAllVelRight(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureVelRightIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, velRight_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double velRight = 5;</code>
       */
      public Builder clearVelRight() {
        velRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> accelRight_ = java.util.Collections.emptyList();
      private void ensureAccelRightIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          accelRight_ = new java.util.ArrayList<java.lang.Double>(accelRight_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public java.util.List<java.lang.Double>
          getAccelRightList() {
        return java.util.Collections.unmodifiableList(accelRight_);
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public int getAccelRightCount() {
        return accelRight_.size();
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public double getAccelRight(int index) {
        return accelRight_.get(index);
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public Builder setAccelRight(
          int index, double value) {
        ensureAccelRightIsMutable();
        accelRight_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public Builder addAccelRight(double value) {
        ensureAccelRightIsMutable();
        accelRight_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public Builder addAllAccelRight(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureAccelRightIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, accelRight_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double accelRight = 6;</code>
       */
      public Builder clearAccelRight() {
        accelRight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private double deltaTime_ ;
      /**
       * <code>required double deltaTime = 7;</code>
       */
      public boolean hasDeltaTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double deltaTime = 7;</code>
       */
      public double getDeltaTime() {
        return deltaTime_;
      }
      /**
       * <code>required double deltaTime = 7;</code>
       */
      public Builder setDeltaTime(double value) {
        bitField0_ |= 0x00000040;
        deltaTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double deltaTime = 7;</code>
       */
      public Builder clearDeltaTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        deltaTime_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.Path)
    }

    static {
      defaultInstance = new Path(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.Path)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_Path_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_Path_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\npath.proto\022\005proto\"\206\001\n\004Path\022\017\n\007posLeft\030" +
      "\001 \003(\001\022\017\n\007velLeft\030\002 \003(\001\022\021\n\taccelLeft\030\003 \003(" +
      "\001\022\020\n\010posRight\030\004 \003(\001\022\020\n\010velRight\030\005 \003(\001\022\022\n" +
      "\naccelRight\030\006 \003(\001\022\021\n\tdeltaTime\030\007 \002(\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_proto_Path_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_Path_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_Path_descriptor,
        new java.lang.String[] { "PosLeft", "VelLeft", "AccelLeft", "PosRight", "VelRight", "AccelRight", "DeltaTime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
